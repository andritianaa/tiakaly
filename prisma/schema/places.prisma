model Place {
    id             String       @id
    title          String
    localisation   String
    bio            String?      @default("")
    content        String       @db.Text
    longitude      Float
    latitude       Float
    keywords       String[]
    isOpenSunday   Boolean      @default(false)
    rating         Int
    priceMin       Int
    priceMax       Int
    type           String // Changer de PlaceType enum Ã  String
    placeTypeId    String? // Ajouter cette relation
    priceInDollars Int?
    placeType      PlaceType?   @relation(fields: [placeTypeId], references: [id])
    status         Status       @default(draft)
    mainMediaId    String
    mainMedia      Media        @relation("MainMedia", fields: [mainMediaId], references: [id])
    MediaPlace     MediaPlace[]
    Contact        Contact[]
    MenuPlace      MenuPlace[]
    gmapLink       String?
    gmapEmbed      String?
    instagramUrl   String?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    PostInsta      PostInsta[]
}

model Media {
    id         String       @id @default(cuid())
    url        String
    type       String
    Place      Place[]      @relation("MainMedia")
    MediaPlace MediaPlace[]
    createdAt  DateTime     @default(now())
    PostInsta  PostInsta[]
    Top        Top[]
}

model MediaPlace {
    id      String @id @default(cuid())
    placeId String
    place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
    mediaId String
    media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model Contact {
    id      String      @id @default(cuid())
    type    ContactType
    value   String
    placeId String
    place   Place       @relation(fields: [placeId], references: [id], onDelete: Cascade)
}

model Menu {
    id        String      @id @default(cuid())
    name      String
    MenuPlace MenuPlace[]
    createdAt DateTime    @default(now())
}

model MenuPlace {
    id      String @id @default(cuid())
    placeId String
    place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
    menuId  String
    menu    Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)
}

model PlaceType {
    id        String   @id @default(cuid())
    name      String   @unique
    value     String   @unique
    places    Place[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Status {
    published
    draft
    archived
}

enum ContactType {
    mobile
    fixe
    email
}
